{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ca74616-1200-4f9f-b596-4f24b7075346",
   "metadata": {},
   "source": [
    " \" Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the \n",
    "range of 1 to 25\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a912ff35-7d6a-4df6-afdd-98192fa85bcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ans. The keyword is  def test() . "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "297936ff-e6bc-4845-8be9-993705c0d537",
   "metadata": {},
   "source": [
    "       #  Example to create a function to return a list of odd number in the range of 1 to 25 be"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ee38a55b-0160-4eda-ac87-a6909fb6daf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "l =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "241ca554-de5d-485d-bc24-6efff01bcef5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in l if i % 2== 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4164a2b-aee3-49f0-8603-3e5fe3a1f46d",
   "metadata": {},
   "source": [
    " \" Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs \n",
    "to demonstrate their use\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "2cfbd408-1e0a-47d2-aec2-76f0aabb8897",
   "metadata": {},
   "outputs": [],
   "source": [
    " # (Ans).The *args and **kwargs parameters are used in Python functions to accept a variable number of arguments.\n",
    " # *args allows passing multiple positional arguments as a tuple.\n",
    " # **kwargs allows passing multiple keyword arguments as a dictionary,provides flexibility and allows for generic\n",
    "    # function definitions."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d282bf6-e425-4d38-b254-42ad98d8d21d",
   "metadata": {},
   "source": [
    " # Example 1 : Creating a function for *args "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9a656526-bea0-40e5-bb0f-89428591e068",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test1(*args):\n",
    "    return args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "83db5b9f-d3df-41b2-8720-2ac3c5520a07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(test1())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "da445cb6-a347-4bab-b5e7-4d9442af9cf5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2, 3, 'Data Science', 'Pwskills', [2, 3, 4, 5, 6])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test1(1,2,3, \"Data Science\" , \"Pwskills\", [2,3,4,5,6])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ba7655d-6bad-4ac0-b4d0-28d1bd4b345d",
   "metadata": {},
   "source": [
    " # Example 2: Creating a function for **kwargs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "eb2fd33e-d73a-4cab-8536-e3bb8446702d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test2(**kwargs):\n",
    "    return kwargs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "574e043d-89ff-4fc6-af4a-05e1ac736231",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(test2())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "11cab018-c9a1-4762-b0a5-f9cab93af455",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a': {1, 2, 3, 4}, 'b': 'Data Science', 'C': 21.1}"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test2(a = {1,2,3,4} , b = \"Data Science\" , C = 21.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0fcab81-b675-4048-b076-4470c78c45ed",
   "metadata": {},
   "source": [
    "\" Q3.  What is an iterator in python? Name the method used to initialise the iterator object and the method \n",
    "used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14, \n",
    "16, 18, 20].\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "47801f69-4244-4834-bc77-0f9686f5ff27",
   "metadata": {},
   "outputs": [],
   "source": [
    "#(Ans.) n Python, an iterator is an object that allows you to access elements of a collection one at a time,\n",
    "# It provides a way to loop over the elements of a collection without the need to know the underlying structure\n",
    "# of collection.\n",
    "   #   The method used to initialize the iterator object is called \"iter()\"\n",
    "    # the method used for iteration is called \"next()\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79f81ed9-f7fd-4ca1-8d7f-54b6c175a2fb",
   "metadata": {},
   "source": [
    "  # Methods to print the first five elements of the given list [2,4,6,8,10, 12,14,16,18,20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5c7654ef-f8cb-4bc6-a5bc-c1e7f07452ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "l= [ 2,4,6,8,10,12,14,16,18,20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4975c893-05a9-4001-8388-9abcec9aeaba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "for i in range(5):\n",
    "    print(l[i])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3974c654-ea21-4461-b821-8cb16885d90f",
   "metadata": {},
   "source": [
    "\"Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator function\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c237bd7b-dfca-429c-8e80-c5a7cf931f21",
   "metadata": {},
   "outputs": [],
   "source": [
    "#(Ans.) A generator function in Python is a special type of function that generates a sequence of values using the\n",
    "# yield keyword allowing for efficient memory usage and lazy evaluation.\n",
    "#          The yield keyword is used in Python to define a generator function and to create generator objects.\n",
    "# and The yield keyword in a generator function is like a \"pause\" button.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59d24f1e-3fc1-4fd9-a7cb-2091ded78869",
   "metadata": {},
   "source": [
    "                            # Example of  a generator function\n",
    "                # it generates a sequence of fibonacci series"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "220094a3-407a-4f3c-b2b9-ad7cd5b151c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the number of elements you are looking for 9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n"
     ]
    }
   ],
   "source": [
    "number = int(input(\"enter the number of elements you are looking for\"))\n",
    "a , b = 0 , 1\n",
    "counter = 0\n",
    "while counter < number :\n",
    "    print(a)\n",
    "    c = a + b\n",
    "    a = b\n",
    "    b = c\n",
    "    counter = counter + 1 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e0b29f2-0ff5-44c6-9639-4922f09871ef",
   "metadata": {},
   "source": [
    "\"Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the \n",
    "first 20 prime numbers.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34d55410-f8e0-4d09-92d2-293b54038390",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"def generate_primes():\n",
    "    num = 2\n",
    "    while num < 1000:\n",
    "        is_prime = True\n",
    "        for i in range(2, int(num ** 0.5) + 1):\n",
    "            if num % i == 0:\n",
    "                is_prime = False\n",
    "                break\n",
    "        if is_prime:\n",
    "            yield num\n",
    "        num += 1\n",
    "\n",
    "# Usage:\n",
    "prime_gen = generate_primes()\n",
    "for _ in range(20):\n",
    "    prime_number = next(prime_gen)\n",
    "    print(prime_number) \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ba00f22-5241-4dc0-b774-7e347a9764a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  The code generates prime numbers one by one, checking if each number is divisible by any smaller number.\n",
    "#  It uses the yield keyword to pause the function and output the prime number.\n",
    "# The for loop with next() prints the first 20 prime numbers generated by the function."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f67907e7-11c6-4126-90fa-5bd54d0210b5",
   "metadata": {},
   "source": [
    " \" Q6. Write a python program to print the first 10 Fibonacci numbers using a while loop.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "5dbff674-2820-457f-a86f-88a9ee906506",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ans. please see Q.4 examples  which i have done."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b37cda5-f80c-44da-8852-795b1a3567d8",
   "metadata": {},
   "source": [
    "\" Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’.\"\n",
    "\" Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bfe1c39-c9e2-40d3-bc26-5811b2ebb01b",
   "metadata": {},
   "source": [
    "                                  \" Ans."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "592f0a49-4e3d-4f04-b5cd-8e0f0e649956",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['p', 'w', 's', 'k', 'i', 'l', 'l', 's']"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "string = \"pwskills\"\n",
    "[i for i in string]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b673364-b63c-46f8-833c-130ff96f219f",
   "metadata": {},
   "source": [
    " \" Q8. Write a python program to check whether a given number is Palindrome or not using a while loop."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3acb76a1-ac1b-4ab7-969a-fc341e4d18a9",
   "metadata": {},
   "source": [
    "                                  # Ans."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "c63960cc-0cdd-443b-882a-98ab2c9b8fce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your number 15\n"
     ]
    }
   ],
   "source": [
    "number= int(input(\"enter your number\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "334b075f-18a0-43b6-96c1-d6cb6ae2e3e3",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "object of type 'int' has no len()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[56], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m reverse \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m----> 2\u001b[0m number \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mnumber\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m number \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m :\n\u001b[1;32m      4\u001b[0m     reverse \u001b[38;5;241m=\u001b[39m reverse \u001b[38;5;241m+\u001b[39m num[number \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m]\n",
      "\u001b[0;31mTypeError\u001b[0m: object of type 'int' has no len()"
     ]
    }
   ],
   "source": [
    "reverse = \"\"\n",
    "number = len(number)\n",
    "while number > 0 :\n",
    "    reverse = reverse + num[number - 1]\n",
    "    number = number - 1\n",
    "print(reverse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c31ea24a-d1db-41e3-ae99-97cc55aee6a1",
   "metadata": {},
   "source": [
    "# I think the procedure is ok as we have done for the  string in while loop.\n",
    "# thus the given number is not a palindrome."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f92499e5-914a-47a0-9ca0-2a102d92e484",
   "metadata": {},
   "source": [
    " \" Q9. Write a code to print odd numbers from 1 to 100 using list comprehension."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ba3a446-f2a0-47fc-9eda-1e9ba118d929",
   "metadata": {},
   "source": [
    "                            # Ans."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "0effefb6-c19d-4230-9327-26d5f8aa4939",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = [1, 2,3,4,------------------100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a62fadb3-9702-42ca-8fe0-af1c9e5016b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 3,\n",
       " 5,\n",
       " 7,\n",
       " 9,\n",
       " 11,\n",
       " 13,\n",
       " 15,\n",
       " 17,\n",
       " 19,\n",
       " 21,\n",
       " 23,\n",
       " 25,\n",
       " 27,\n",
       " 29,\n",
       " 31,\n",
       " 33,\n",
       " 35,\n",
       " 37,\n",
       " 39,\n",
       " 41,\n",
       " 43,\n",
       " 45,\n",
       " 47,\n",
       " 49,\n",
       " 51,\n",
       " 53,\n",
       " 55,\n",
       " 57,\n",
       " 59,\n",
       " 61,\n",
       " 63,\n",
       " 65,\n",
       " 67,\n",
       " 69,\n",
       " 71,\n",
       " 73,\n",
       " 75,\n",
       " 77,\n",
       " 79,\n",
       " 81,\n",
       " 83,\n",
       " 85,\n",
       " 87,\n",
       " 89,\n",
       " 91,\n",
       " 93,\n",
       " 95,\n",
       " 97,\n",
       " 99]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in range(1,100) if i % 2 != 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5035a928-e847-4f5f-8ae0-4c15ddf66b1d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
